Database scripts

TRAIN DETAILS
=============================

CREATE TABLE TRAIN_DETAILS(TRAINNO VARCHAR2(20) PRIMARY KEY, TRAINTYPE VARCHAR2(10), ORIGIN VARCHAR2(20),  DESTINATION VARCHAR2(20), DEPARTURETIME VARCHAR2(20), ARRIVALTIME VARCHAR2(20), SEATPRICE NUMBER(20), TOTALSEATS NUMBER(10));

CUSTOMER
============================

CREATE TABLE CUSTOMER(C_ID NUMBER(20)PRIMARY KEY, C_NAME VARCHAR2(20), AGE NUMBER(20), GENDER VARCHAR2(7), PHONENO NUMBER(11), ADDRESS VARCHAR(30), PASS VARCHAR2(30));

RESERVATION
=================================

CREATE TABLE RESERVATION (RECEIPTNO NUMBER PRIMARY KEY, T_NO VARCHAR2(20), CID NUMBER(20), SEATRESERVED NUMBER(20), R_DATE VARCHAR2(20), STATUS VARCHAR2(20));

ADMIN
=================================

CREATE TABLE ADMIN (PHONE VARCHAR2(11) PRIMARY KEY, STATUS VARCHAR2(10));


PROCEDURE
===================================

CREATE OR REPLACE PROCEDURE CUSTOMERREG(
   NAME IN CUSTOMER.C_NAME%TYPE,
   AG IN CUSTOMER.AGE%TYPE,
   GEN IN CUSTOMER.GENDER%TYPE,
   PHN IN CUSTOMER.PHONENO%TYPE,
   ADDR IN CUSTOMER.ADDRESS%TYPE,
   PASSW IN CUSTOMER.PASS%TYPE
)
IS
BEGIN
INSERT INTO CUSTOMER(C_ID, C_NAME, AGE, GENDER, PHONENO, ADDRESS, PASS) VALUES (SEQ_CID.NEXTVAL, NAME, AG, GEN, PHN, ADDR, PASSW);
END;


CREATE OR REPLACE PROCEDURE ADDTRAININFO(
   TRAIN IN TRAIN_DETAILS.TRAINNO%TYPE,
   TTYPE IN TRAIN_DETAILS.TRAINTYPE%TYPE,
   ORI IN TRAIN_DETAILS.ORIGIN%TYPE,
   DES IN TRAIN_DETAILS.DESTINATION%TYPE,
   DEPTIME IN TRAIN_DETAILS.DEPARTURETIME%TYPE,
   ARTIME IN TRAIN_DETAILS.ARRIVALTIME%TYPE,
   SEAT IN TRAIN_DETAILS.SEATPRICE%TYPE,
   TOTAL IN TRAIN_DETAILS.TOTALSEATS%TYPE   
   
)
IS
BEGIN
INSERT INTO TRAIN_DETAILS(TRAINNO, TRAINTYPE, ORIGIN, DESTINATION, DEPARTURETIME, ARRIVALTIME, SEATPRICE, TOTALSEATS) VALUES (TRAIN, TTYPE, ORI, DES, DEPTIME, ARTIME, SEAT, TOTAL);
END;

CREATE OR REPLACE PROCEDURE UPDATETRAININFO(
   SELECTTRAIN IN VARCHAR2,
   TRAIN IN TRAIN_DETAILS.TRAINNO%TYPE,
   TTYPE IN TRAIN_DETAILS.TRAINTYPE%TYPE,
   ORI IN TRAIN_DETAILS.ORIGIN%TYPE,
   DES IN TRAIN_DETAILS.DESTINATION%TYPE,
   DEPTIME IN TRAIN_DETAILS.DEPARTURETIME%TYPE,
   ARTIME IN TRAIN_DETAILS.ARRIVALTIME%TYPE,
   SEAT IN TRAIN_DETAILS.SEATPRICE%TYPE,
   TOTAL IN TRAIN_DETAILS.TOTALSEATS%TYPE   
   
)
IS
BEGIN
   UPDATE TRAIN_DETAILS SET TRAINNO = TRAIN, TRAINTYPE = TTYPE, ORIGIN = ORI, DESTINATION = DES, DEPARTURETIME = DEPTIME, ARRIVALTIME = ARTIME, SEATPRICE = SEAT, TOTALSEATS = TOTAL
    WHERE TRAINNO = SELECTTRAIN;
END;

CREATE OR REPLACE PROCEDURE BOOKTICKET(
   TRAIN IN RESERVATION .T_NO%TYPE,
   CUSID IN RESERVATION .CID%TYPE,
    RESERVED IN RESERVATION .SEATRESERVED%TYPE,
   REDATE IN RESERVATION .R_DATE%TYPE,
   STAT IN RESERVATION .STATUS %TYPE
)
IS
BEGIN
INSERT INTO RESERVATION (RECEIPTNO, T_NO, CID, SEATRESERVED, R_DATE, STATUS) VALUES (SEQ_RECIPT.NEXTVAL, TRAIN, CUSID, RESERVED, REDATE, STAT);
END;

CREATE OR REPLACE PROCEDURE DELETETRAININFO(
               TRAIN IN VARCHAR2
)
IS
BEGIN
DELETE TRAIN_DETAILS WHERE TRAINNO = TRAIN;
END;

CREATE OR REPLACE PROCEDURE UPDATEUSERSTATUS(
               PHN IN ADMIN.PHONE%TYPE,
               STAT IN ADMIN.STATUS%TYPE
)
IS
BEGIN
UPDATE ADMIN SET STATUS = STAT WHERE PHONE = PHN;
END;

CREATE OR REPLACE PROCEDURE UPDATECUSTOMERINFO(
   NAME IN CUSTOMER.C_NAME%TYPE,
   AG IN CUSTOMER.AGE%TYPE,
   GEN IN CUSTOMER.GENDER%TYPE,
   PHN IN CUSTOMER.PHONENO%TYPE,
   ADDR IN CUSTOMER.ADDRESS%TYPE,
   PASSW IN CUSTOMER.PASS%TYPE)
IS
BEGIN
UPDATE CUSTOMER SET C_NAME = NAME, AGE = AG, GENDER = GEN, ADDRESS = ADDR, PASS = PASSW WHERE PHONENO=PHN;
END;


SEQUENCE
===================================

CREATE SEQUENCE SEQ_CID
START WITH     1000
INCREMENT BY   1
NOCACHE
NOCYCLE;

CREATE SEQUENCE SEQ_RECIPT
START WITH     10000
INCREMENT BY   1
NOCACHE
NOCYCLE;

TRIGGER
===========================
CREATE OR REPLACE TRIGGER TRIGGER_TRAIN
AFTER INSERT OR UPDATE OR DELETE ON TRAIN_DETAILS
FOR EACH ROW 
ENABLE
BEGIN
 IF INSERTING THEN
 DBMS_OUTPUT.PUT_LINE ('A NEW TRAIN INFO JUST ADDED');

 ELSIF UPDATING THEN
 DBMS_OUTPUT.PUT_LINE ('A TRAIN INFO JUST UPDATED');

 ELSIF DELETING THEN
 DBMS_OUTPUT.PUT_LINE ('A TRAIN INFO JUST DELETED’);
 END IF;
END;

CREATE OR REPLACE TRIGGER TRIGGER_CUSTOMER
AFTER INSERT OR UPDATE OR DELETE ON CUSTOMER
FOR EACH ROW 
BEGIN
 IF INSERTING THEN
 DBMS_OUTPUT.PUT_LINE ('A NEW CUSTOMER JUST ADDED');

 ELSIF UPDATING THEN
 DBMS_OUTPUT.PUT_LINE ('A CUSTOMER INFO JUST UPDATED');

 ELSIF DELETING THEN
 DBMS_OUTPUT.PUT_LINE ('A CUSTOMER ACCOUNT JUST DELETED');
 END IF;
END

CREATE OR REPLACE TRIGGER TRIGGER_RESERVATION
AFTER INSERT ON RESERVATION
FOR EACH ROW 
BEGIN
   DBMS_OUTPUT.PUT_LINE ('A USER JUST BOOKED TRAIN SEATS');
END;

CREATE OR REPLACE TRIGGER TRIGGER_ADMIN
AFTER INSERT OR UPDATE OR DELETE ON ADMIN
FOR EACH ROW 
BEGIN
 IF INSERTING THEN
 DBMS_OUTPUT.PUT_LINE ('A NEW USER JUST ADDED');

 ELSIF UPDATING THEN
 DBMS_OUTPUT.PUT_LINE ('A USER INFO JUST UPDATED');

 ELSIF DELETING THEN
 DBMS_OUTPUT.PUT_LINE ('A USER ACCOUNT JUST DELETED');
 END IF;
END;
